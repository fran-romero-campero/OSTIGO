# Create the bar chart
library(ggplot2)
ggplot(df_long,
aes(x = Ontology,
y = NumberOfGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontology",
y = "Number of GO",
fill = "Version") + ggtitle("Increase in GO Terms (Annotation Improvement)") + theme_minimal()
# Create the bar chart
library(ggplot2)
ggplot(df_long,
aes(x = Ontology,
y = NumberOfGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontology",
y = "Number of GO",
fill = "Version") + ggtitle("Increase in GO Terms (Annotation Improvement)") + theme_minimal()
################################################################################
# # GENE IMPROVEMENT
library(DBI) #(Data Base Interface)
# Comparison of GO terms for each annotation
# Extract all GO terms from the old package org.Otauri.eg.db and determine their ontology
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
# Extract all GO terms from the new package org.Otauriv2.eg.db and determine their ontology
go.2 <- dbGetQuery(dbconn(org.Otauriv2.eg.db), "select * from go;")
head(go.2)
(count_v2 <- table(go.2$ONTOLOGY))
# Barplot
library(ggplot2)
library(dplyr)
# Create a dataframe with the counts
df <- data.frame(Version = c("v1", "v2"),
BP = c(count_v1["BP"], count_v2["BP"]),
CC = c(count_v1["CC"], count_v2["CC"]),
MF = c(count_v1["MF"], count_v2["MF"]))
# Convert the dataframe to long (tidy) format for the plot
library(tidyr)
df_long <- pivot_longer(df, cols = -Version, names_to = "Ontology", values_to = "NumberOfGO")
# Create the bar chart
library(ggplot2)
ggplot(df_long,
aes(x = Ontology,
y = NumberOfGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontology",
y = "Number of GO",
fill = "Version") + ggtitle("Increase in GO Terms (Annotation Improvement)") + theme_minimal()
################################################################################
# # GENE IMPROVEMENT
library(DBI) #(Data Base Interface)
# Comparación de términos GO de cada anotación
# Extraer todos los términos de GO del paquete antiguo org.Otauri.eg.db y ver a qué ontología pertenece cada GO
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
# Extraer todos los términos de GO del paquete nuevo org.Otauriv2.eg.db y ver a qué ontología pertenece cada GO
go.2 <- dbGetQuery(dbconn(org.Otauriv2.eg.db), "select * from go;")
head(go.2)
(count_v2 <- table(go.2$ONTOLOGY))
# Barplot
library(ggplot2)
library(dplyr)
# Crear un dataframe con los conteos
df <- data.frame(Version = c("v1", "v2"),
BP = c(count_v1["BP"], count_v2["BP"]),
CC = c(count_v1["CC"], count_v2["CC"]),
MF = c(count_v1["MF"], count_v2["MF"]))
# Convertir el dataframe al formato largo (tidy) para el gráfico
library(tidyr)
df_long <- pivot_longer(df, cols = -Version, names_to = "Ontologia", values_to = "NumeroGO")
# Crear el gráfico de barras
library(ggplot2)
ggplot(df_long,
aes(x = Ontologia,
y = NumeroGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontología",
y = "Nº de GO",
fill = "Versión") + ggtitle("Aumento de Términos GO (Mejora de la anotación)") + theme_minimal()
# Barplot
install.packages("ggplot2")
install.packages("ggplot2")
# Barplot
install.packages("ggplot2")
library(ggplot2)
install.packages("tidyr")
################################################################################
# # GENE IMPROVEMENT
library(DBI) #(Data Base Interface)
## We need this package to create our annotation package
## Before remove the current version in the folder to avoid conflicts
# BiocManager::install("AnnotationForge")
library(AnnotationForge)
# BiocManager::install("GO.db")
library(GO.db)
## You can install the package with this command
# install.packages("./org.Otauriv2.eg.db/", repos=NULL, type = "source")
library(org.Otauriv2.eg.db)
# install.packages("./old_otauri_package/org.Otauri.eg.db/", repos=NULL, type = "source")
library(org.Otauri.eg.db)
## Using clusterprofiler, this new package and the gene sets to test enrihcment
## you can test how your annotation improves the previous one.
# BiocManager::install("clusterProfiler")
library(clusterProfiler)
################################################################################
# # COMPARISON OF VERSIONS
# # Enrichment GO terms
# BiocManager::install("enrichplot")
library(enrichplot)
################################################################################
# # GENE IMPROVEMENT
library(DBI) #(Data Base Interface)
# Comparación de términos GO de cada anotación
# Extraer todos los términos de GO del paquete antiguo org.Otauri.eg.db y ver a qué ontología pertenece cada GO
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
# Extraer todos los términos de GO del paquete nuevo org.Otauriv2.eg.db y ver a qué ontología pertenece cada GO
go.2 <- dbGetQuery(dbconn(org.Otauriv2.eg.db), "select * from go;")
head(go.2)
(count_v2 <- table(go.2$ONTOLOGY))
# Barplot
# install.packages("ggplot2")
library(ggplot2)
# install.packages("tidyr")
library(dplyr)
# Crear un dataframe con los conteos
df <- data.frame(Version = c("v1", "v2"),
BP = c(count_v1["BP"], count_v2["BP"]),
CC = c(count_v1["CC"], count_v2["CC"]),
MF = c(count_v1["MF"], count_v2["MF"]))
# Convertir el dataframe al formato largo (tidy) para el gráfico
library(tidyr)
df_long <- pivot_longer(df, cols = -Version, names_to = "Ontologia", values_to = "NumeroGO")
# Crear el gráfico de barras
library(ggplot2)
ggplot(df_long,
aes(x = Ontologia,
y = NumeroGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontología",
y = "Nº de GO",
fill = "Versión") + ggtitle("Aumento de Términos GO (Mejora de la anotación)") + theme_minimal()
################################################################################
# # GENE IMPROVEMENT
library(DBI) #(Data Base Interface)
# Comparison of GO terms for each annotation
# Extract all GO terms from the old package org.Otauri.eg.db and determine their ontology
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
# Extract all GO terms from the new package org.Otauriv2.eg.db and determine their ontology
go.2 <- dbGetQuery(dbconn(org.Otauriv2.eg.db), "select * from go;")
head(go.2)
(count_v2 <- table(go.2$ONTOLOGY))
# Barplot
library(ggplot2)
library(dplyr)
# Create a dataframe with the counts
df <- data.frame(Version = c("v1", "v2"),
BP = c(count_v1["BP"], count_v2["BP"]),
CC = c(count_v1["CC"], count_v2["CC"]),
MF = c(count_v1["MF"], count_v2["MF"]))
# Convert the dataframe to long (tidy) format for the plot
library(tidyr)
df_long <- pivot_longer(df, cols = -Version, names_to = "Ontology", values_to = "NumberOfGO")
# Create the bar chart
library(ggplot2)
ggplot(df_long,
aes(x = Ontology,
y = NumberOfGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontology",
y = "Number of GO",
fill = "Version") + ggtitle("Increase in GO Terms (Annotation Improvement)") + theme_minimal()
# Compare the total number of genes associated with each ontology GO term (For each ontology, extract GO terms, and for each GO term, extract genes)
# Create an empty dataframe to store the results
result_categories <- data.frame(Version = character(0), Category = character(0), Genes = numeric(0))
# Create a vector of versions
annotation <- c("V1", "V2")
for (version in annotation) {
# Get data for the current version
if (version == "V1") {
go_data <- go.1
db_conn <- org.Otauri.eg.db
} else if (version == "V2") {
go_data <- go.2
db_conn <- org.Otauriv2.eg.db
}
# Unique categories
categories <- sort(unique(go_data$ONTOLOGY)) # Sort the categories; another option would be to directly specify the vector as categories <- c("BP", "CC", "MF")
for (category in categories) {
# Filter GO terms for the current category
go_category <- subset(go_data, ONTOLOGY == category)$GO
genes_category <- character(0)
for (go in go_category) {
# Get genes for the current GO term
genes <- unique(AnnotationDbi::select(db_conn, keytype = "GOALL", keys = go, columns = "GID")$GID)
genes_category <- c(genes_category, genes)
}
# Count the number of unique genes
num_genes_category <- length(unique(genes_category))
# Add results to the dataframe
result_categories <- rbind(result_categories, data.frame(Version = version, Category = category, Genes = num_genes_category))
}
}
load("./resultados_categorias.RData")
library(reshape2)
result_categories_df <- dcast(result_categories, Version ~ Category, value.var = "Genes")
load("./resultados_categorias.RData")
library(reshape2)
result_categories_df <- dcast(resultados_categorias, Version ~ Category, value.var = "Genes")
# Compare the total number of genes associated with each ontology GO term (For each ontology, extract GO terms, and for each GO term, extract genes)
# Create an empty dataframe to store the results
result_categories <- data.frame(Version = character(0), Category = character(0), Genes = numeric(0))
# Create a vector of versions
annotation <- c("V1", "V2")
for (version in annotation) {
# Get data for the current version
if (version == "V1") {
go_data <- go.1
db_conn <- org.Otauri.eg.db
} else if (version == "V2") {
go_data <- go.2
db_conn <- org.Otauriv2.eg.db
}
# Unique categories
categories <- sort(unique(go_data$ONTOLOGY)) # Sort the categories; another option would be to directly specify the vector as categories <- c("BP", "CC", "MF")
for (category in categories) {
# Filter GO terms for the current category
go_category <- subset(go_data, ONTOLOGY == category)$GO
genes_category <- character(0)
for (go in go_category) {
# Get genes for the current GO term
genes <- unique(AnnotationDbi::select(db_conn, keytype = "GOALL", keys = go, columns = "GID")$GID)
genes_category <- c(genes_category, genes)
}
# Count the number of unique genes
num_genes_category <- length(unique(genes_category))
# Add results to the dataframe
result_categories <- rbind(result_categories, data.frame(Version = version, Category = category, Genes = num_genes_category))
}
}
# Pivot the dataframe to obtain the desired format
save(result_categories, file= "result_categories.RData")
load("./result_categories.RData")
library(reshape2)
result_categories_df <- dcast(result_categories, Version ~ Category, value.var = "Genes")
# Print the results dataframe
print(result_categories_df)
# Barplot of the data
library(ggplot2)
# Convert the dataframe to long (tidy) format for the plot
library(tidyr)
result_categories_long <- pivot_longer(result_categories_df,
cols = -Version,
names_to = "Category",
values_to = "NumberGenes")
# Create the bar chart
ggplot(result_categories_long, aes(x = Category, y = NumberGenes, fill = Version)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Category", y = "Number of Genes", fill = "Version") +
ggtitle("Comparison of Number of Genes per Category and Version") +
theme_minimal()
# Create the bar chart
library(ggplot2)
ggplot(df_long,
aes(x = Ontology,
y = NumberOfGO,
fill = Version)) + geom_bar(stat = "identity",
position = "dodge") + labs(x = "Ontology",
y = "Number of GO",
fill = "Version") + ggtitle("Comparison of Number of GO terms per Category and Version") + theme_minimal()
# install.packages("tidyr")
library(dplyr)
# Convert the dataframe to long (tidy) format for the plot
library(tidyr)
## Load current GO annoation for Ostreococcus tauri
ostta_v1_go_annotation <- read.table(file="ostta_v1_go_annotation.tsv", header=T, sep="\t")
head(ostta_v1_go_annotation)
length(unique(ostta_v1_go_annotation$GID))
length(unique(ostta_v1_go_annotation$GID))/7668
# Is there any improvement ostta_v2_go_annotation compared to version 1?
ostta.annoation.v2 <- read.table(file="ostta_v2_go_annotation.tsv",header=T,sep="\t")
head(ostta.annoation)
# Is there any improvement ostta_v2_go_annotation compared to version 1?
ostta.annoation.v2 <- read.table(file="ostta_v2_go_annotation.tsv",header=T,sep="\t")
head(ostta.annoation)
head(ostta.annoation.v2)
length(unique(ostta.annoation.v2$GID))
length(unique(ostta.annoation.v2$GID))/7668 #we see that the annotation has improved around 4%
# Creation of v1.2
# Read the TSV file
# Read the CSV file with semicolon (;) as the delimiter
#ostta_v1_go_annotation <- read.table("ostta_v1_go_annotation.tsv", sep = "\t", header = TRUE)
gene_expansion <- read.csv("./manual_expansion/gene_expansion.csv", sep = ";", header = FALSE)
# Creation of v1.2
# Read the TSV file
# Read the CSV file with semicolon (;) as the delimiter
#ostta_v1_go_annotation <- read.table("ostta_v1_go_annotation.tsv", sep = "\t", header = TRUE)
gene_expansion <- read.csv("./manual_expansion/gene_expansion.csv", sep = ";", header = FALSE)
## Load current GO annoation for Ostreococcus tauri
ostta_v1_go_annotation <- read.table(file="./annotation/ostta_v1_go_annotation.tsv", header=T, sep="\t")
head(ostta_v1_go_annotation)
length(unique(ostta_v1_go_annotation$GID))
length(unique(ostta_v1_go_annotation$GID))/7668
## Next we load the pathways in Ostreococcus tauri annotated with GOs
ostta.pathways.go <- read.table(file="./kegg_expansion/pathways_ostreococcus_tauri_go_added.tsv",header=T, sep="\t")
head(ostta.pathways.go)
# Creation of v2
# Read the TSV file
ostta_v1.2_go_annotation <- read.table("./manual_expansion/ostta_v1.2_go_annotation.tsv", sep = "\t", header = TRUE)
ostta_go_annotation_from_kegg_pathways <- read.table("./kegg_expansion/ostta_go_annotation_from_kegg_pathways.tsv", sep = "\t", header = TRUE)
# Is there any improvement ostta_v2_go_annotation compared to version 1?
ostta.annoation.v2 <- read.table(file="./annotation/ostta_v2_go_annotation.tsv",header=T,sep="\t")
## Alternative way:
## Now we generate an annotation R package with the updated annotations
ostta.manual.annotation <- read.table(file="./manual_expansion/ostta_v1.2_go_annotation.tsv",header=T,sep="\t")
head(ostta.manual.annotation)
ostta.pathway.go.annotation <- read.table(file="./kegg_expansion/ostta_go_annotation_from_kegg_pathways.tsv",header=T,sep="\t")
head(ostta.pathway.go.annotation)
# Is there any improvement ostta_v2_go_annotation compared to version 1?
ostta.annoation.v2 <- read.table(file="./annotation/ostta_v2_go_annotation.tsv",header=T,sep="\t")
head(ostta.annoation.v2)
length(unique(ostta.annoation.v2$GID))
length(unique(ostta.annoation.v2$GID))/7668 #we see that the annotation has improved around 4%
## We need this package to create our annotation package
## Before remove the current version in the folder to avoid conflicts
# BiocManager::install("AnnotationForge")
library(AnnotationForge)
# BiocManager::install("GO.db")
library(GO.db)
## We need this package to create our annotation package
## Before remove the current version in the folder to avoid conflicts
# BiocManager::install("AnnotationForge")
library(AnnotationForge)
## You can install the package with this command
# install.packages("./org.Otauriv2.eg.db/", repos=NULL, type = "source")
library(org.Otauriv2.eg.db)
# install.packages("./old_otauri_package/org.Otauri.eg.db/", repos=NULL, type = "source")
library(org.Otauri.eg.db)
## Using clusterprofiler, this new package and the gene sets to test enrihcment
## you can test how your annotation improves the previous one.
# BiocManager::install("clusterProfiler")
library(clusterProfiler)
################################################################################
# # COMPARISON OF VERSIONS
# # Enrichment GO terms
# BiocManager::install("enrichplot")
library(enrichplot)
################################################################################
# # GO IMPROVEMENT
library(DBI) #(Data Base Interface)
# Comparison of GO terms for each annotation
# Extract all GO terms from the old package org.Otauri.eg.db and determine their ontology
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
# Extract all GO terms from the new package org.Otauriv2.eg.db and determine their ontology
go.2 <- dbGetQuery(dbconn(org.Otauriv2.eg.db), "select * from go;")
head(go.2)
(count_v2 <- table(go.2$ONTOLOGY))
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
(count_v2 <- table(go.2$ONTOLOGY))
# Barplot
# install.packages("ggplot2")
library(ggplot2)
# install.packages("tidyr")
library(dplyr)
# Create a dataframe with the counts
df <- data.frame(Version = c("v1", "v2"),
BP = c(count_v1["BP"], count_v2["BP"]),
CC = c(count_v1["CC"], count_v2["CC"]),
MF = c(count_v1["MF"], count_v2["MF"]))
df
# Convert the dataframe to long (tidy) format for the plot
library(tidyr)
df_long <- pivot_longer(df, cols = -Version, names_to = "Ontology", values_to = "NumberOfGO")
df_long
df
3316-6459
1793-1873
9467-9221
3143+80-246
load("./result_categories.RData")
library(reshape2)
result_categories_df <- dcast(result_categories, Version ~ Category, value.var = "Genes")
result_categories_df
# Print the results dataframe
print(result_categories_df)
2937-2435
1451 -1405
3612-3615
502+46-3
545/7668
# Ruta específica que deseas contar
ruta <- "path:ota03030"
# Lee el archivo pathways_ostreococcus_tauri_go_added.tsv
data <- read.delim("pathways_ostreococcus_tauri_go_added.tsv", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
# Lee el archivo pathways_ostreococcus_tauri_go_added.tsv
data <- read.delim("./kegg_expansion/pathways_ostreococcus_tauri_go_added.tsv", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota00195"
# Lee el archivo pathways_ostreococcus_tauri_go_added.tsv
data <- read.delim("./kegg_expansion/pathways_ostreococcus_tauri_go_added.tsv", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota00196"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
34+9
# Ruta específica que deseas contar
ruta <- "path:ota00020"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota00906"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota04136"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota04130"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota00500"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
# Ruta específica que deseas contar
ruta <- "path:ota00230"
# Filtra las filas correspondientes a la ruta específica
ruta_filtrada <- data[data$pathway.id == ruta, ]
# Separa los genes por comas y cuenta su número
num_genes <- length(unlist(strsplit(ruta_filtrada$genes, ",")))
# Imprime el resultado
print(num_genes)
citation("AnnotationForge")
citation("GO.db")
packageVersion("GO.db")
packageVersion("AnnotationForge")
packageVersion("DBI")
citation("DBI")
citation("clusterProfiler")
packageVersion("clusterProfiler")
citation("enrichplot")
## We need this package to create our annotation package
## Before remove the current version in the folder to avoid conflicts
# BiocManager::install("AnnotationForge")
library(AnnotationForge)
# BiocManager::install("GO.db")
library(GO.db)
## You can install the package with this command
# install.packages("./org.Otauriv2.eg.db/", repos=NULL, type = "source")
library(org.Otauriv2.eg.db)
# install.packages("./old_otauri_package/org.Otauri.eg.db/", repos=NULL, type = "source")
library(org.Otauri.eg.db)
################################################################################
# # COMPARISON OF VERSIONS
## Using clusterprofiler, this new package and the gene sets to test enrihcment
## you can test how your annotation improves the previous one.
# BiocManager::install("clusterProfiler")
library(clusterProfiler)
# # GO IMPROVEMENT
# install.packages("DBI")
library(DBI) #(Data Base Interface)
# Comparison of GO terms for each annotation
# Extract all GO terms from the old package org.Otauri.eg.db and determine their ontology
go.1 <- dbGetQuery(dbconn(org.Otauri.eg.db), "select * from go;")
head(go.1)
(count_v1 <- table(go.1$ONTOLOGY))
